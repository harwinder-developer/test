<?php
/**
 * Class responsible for determining the donations associated with the contents of an EDD cart.
 *
 * @package     Charitable EDD/Classes/Charitable_EDD_Cart
 * @version     1.0.0
 * @author      Eric Daams
 * @copyright   Copyright (c) 2017, Studio 164a
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License  
 */

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) { exit; }

if ( ! class_exists( 'Charitable_EDD_Cart' ) ) : 

    /**
     * Charitable_EDD_Cart
     *
     * @since       1.0.0
     */
    class Charitable_EDD_Cart {

        /**
         * Fees added to the cart.  
         *
         * @var     array
         * @access  private
         */
        private $fees;

        /**
         * The downloads included in the cart.  
         *
         * @var     array
         * @access  private
         */
        private $downloads;

        /**
         * The benefactors for this cart. 
         *
         * @var     array
         * @access  private
         */
        private $benefactors;

        /**
         * Total benefit amount generated by cart. 
         *
         * @var     float
         * @access  private
         */
        private $total_benefit;

        /**
         * Benefit amount per item in cart. 
         *
         * @var     array
         * @access  private
         */
        private $item_benefits = array();

        /**
         * List of Charitable_EDD_Benefactor objects. 
         *
         * @var     Charitable_EDD_Benefactor[]
         * @access  private
         */
        private $benefactor_objects = array();

        /**
         * Create class object.
         * 
         * @param   array           $downloads
         * @param   array|false     $fees
         * @access  public
         * @since   1.0.0
         */
        public function __construct( $downloads, $fees = array() ) {        
            $this->downloads = $this->parse_downloads( $downloads );
            $this->fees      = $this->parse_fees( $fees );
        }

        /**
         * Create object with a payment ID. 
         *
         * @param   int         $payment_id
         * @return  Charitable_EDD_Cart
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function create_with_payment( $payment_id ) {
            return new Charitable_EDD_Cart( edd_get_payment_meta_cart_details( $payment_id, true ), edd_get_payment_fees( $payment_id, 'item' ) );
        }

        /**
         * Get any benefactory relationships for this cart.  
         *
         * @param   boolean|DateTime $at_date Get benefactors at specified date. May be a string or a boolean.
         *                                    If true (default), this will get any benefactors that are currently active.
         *                                    If false, this will get any benefactors.
         *                                    If a DateTime object, this will get any benefactors active at the date.
         * @return  object[]
         * @access  public
         * @since   1.0.0
         */
        public function get_benefactors( $at_date = true ) {
            $this->benefactors = wp_cache_get( $this->get_cache_key() );

            if ( false === $this->benefactors ) {

                $this->benefactors = charitable_get_table( 'edd_benefactors' )->get_benefactors_for_downloads( $this->downloads, $at_date );

                wp_cache_set( $this->get_cache_key(), $this->benefactors );

            }

            return $this->benefactors;
        }

        /**
         * Checks whether there are any benefactory relationships for this cart. 
         *
         * @param   boolean|DateTime $at_date Get benefactors at specified date. May be a string or a boolean.
         *                                    If true (default), this will get any benefactors that are currently active.
         *                                    If false, this will get any benefactors.
         *                                    If a DateTime object, this will get any benefactors active at the date.
         * @return  boolean
         * @access  public
         * @since   1.0.0
         */
        public function has_benefactors( $at_date = true ) {
            return count( $this->get_benefactors( $at_date ) ) > 0;
        }

        /**
         * Return total benefits derived from benefactor record for the cart. 
         *
         * @return  array
         * @access  public
         * @since   1.0.0
         */
        public function get_benefactor_benefits() {
            if ( ! isset( $this->benefactor_benefits ) ) {

                $this->benefactor_benefits = array_reduce( $this->get_benefactors(), array( $this, 'get_benefits_for_benefactor' ), array() );

            }

            return $this->benefactor_benefits;
        }

        /**
         * Returns the total benefit amount for the cart.  
         *
         * @return  float
         * @access  public
         * @since   1.0.0
         */
        public function get_total_benefit_amount() {
            if ( ! isset( $this->total_benefit ) ) {

                $this->total_benefit = array_reduce( $this->get_benefactor_benefits(), array( $this, 'calculate_total_benefit_amount' ), $this->get_total_fee_donation() );

                if ( Charitable_Currency::get_instance()->is_comma_decimal() ) {
                    $this->total_benefit = str_replace( '.', ',', $this->total_benefit );
                }            
            }

            return $this->total_benefit;
        }

        /**
         * Returns the benefits by campaign.
         *
         * Note that this will include any donations added as "fees".
         *
         * @return  array[]
         * @access  public
         * @since   1.0.0
         */
        public function get_benefits_by_campaign() {
            if ( ! isset( $this->campaign_benefits ) ) {

                $this->campaign_benefits = array_reduce( $this->get_benefactor_benefits(), array( $this, 'divide_benefits_by_campaign' ), $this->fees );

            }

            return $this->campaign_benefits;
        }

        /**
         * Returns all campaigns that are being benefited by this cart.
         *
         * @return  int[]
         * @access  public
         * @since   1.0.0
         */
        public function get_benefiting_campaigns() {
            return array_keys( $this->get_benefits_by_campaign() );
        }
        
        /**
         * Returns the total benefit amount going to a specific campaign.  
         *
         * @param   int $campaign_id
         * @return  float
         * @access  public
         * @since   1.0.0
         */
        public function get_total_campaign_benefit_amount( $campaign_id ) {        
            $benefits_by_campaigns = $this->get_benefits_by_campaign();

            if ( ! isset( $benefits_by_campaigns[ $campaign_id ] ) ) {

                return 0;            

            }

            $total = array_sum( $benefits_by_campaigns[ $campaign_id ] );

            if ( Charitable_Currency::get_instance()->is_comma_decimal() ) {
                $total = str_replace( '.', ',', $total );
            }

            return $total;
        }

        /**
         * Returns a list of the downloads in the cart with the total amount they are contributing to campaigns, by campaign. 
         *
         * @return  array[]
         * @access  public
         * @since   1.0.0
         */
        public function get_benefits_by_downloads() {
            if ( ! isset( $this->download_benefits ) ) {

                $this->download_benefits = array_reduce( $this->downloads, array( $this, 'get_benefits_by_download' ), array() );

            }

            return $this->download_benefits;
        }

        /**
         * Returns the campaigns and amounts that will be contributed to by the purchase of the download. 
         *
         * @param   int     $download_id
         * @param   boolean $linked
         * @return  string
         * @access  public
         * @since   1.0.0
         */
        public function get_download_benefits( $download_id, $linked = false ) {
            $benefits_by_downloads = $this->get_benefits_by_downloads();

            if ( ! isset( $benefits_by_downloads[ $download_id ] ) ) {
                return '';
            }

            $campaigns_list = array();

            foreach ( $benefits_by_downloads[ $download_id ] as $campaign_id => $amounts ) {
                $campaign_name = get_the_title( $campaign_id );

                if ( $linked ) {
                    $campaigns_list[] = sprintf( '<a href="%s" title="%s">%s</a>', get_permalink( $campaign_id ), $campaign_name, $campaign_name );
                }
                else {
                    $campaigns_list[] = $campaign_name;
                }            
            }

            return apply_filters( 'charitable_edd_download_benefits', implode( ', ', $campaigns_list ), $campaigns_list, $download_id, $linked, $this );
        }

        /**
         * Returns all campaign donations made as fees.  
         *
         * @return  array
         * @access  public
         * @since   1.0.0
         */
        public function get_fees() {
            return $this->fees;
        }

        /**
         * Checks if any donations were made as fees.  
         *
         * @return  void
         * @access  public
         * @since   1.0.0
         */
        public function has_donations_as_fees() {
            return ! empty( $this->fees );
        }

        /**
         * Get total amount of donations contributed towards campaign as a "fee". 
         *
         * @return  float
         * @access  public
         * @since   1.0.0
         */
        public function get_total_fee_donation_for_campaign( $campaign_id ) {
            return isset( $this->fees[ $campaign_id ] ) ? array_sum( $this->fees[ $campaign_id ] ) : 0;
        }

        /**
         * Get total amount contributed to campaign as a "fee". 
         *
         * @return  float
         * @access  public
         * @since   1.0.0
         */
        public function get_total_fee_donation() {      
            return array_reduce( $this->fees, array( $this, 'calculate_sum_total_of_amounts' ), 0 );
        }

        /**
         * Method to add a donation fee to the EDD cart. 
         *
         * @return  array   Returns an array containing all fees.
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function add_donation_fee_to_cart( $campaign_id, $amount ) {    
            $campaign = new Charitable_Campaign( $campaign_id );
                
            $donation_fee_args = apply_filters( 'charitable_edd_donation_fee_args', array(
                'amount'        => $amount,
                'label'         => sprintf( '%s %s', _x( 'Donation to', 'donation to campaign', 'charitable-edd' ), $campaign->post_title ),
                'id'            => 'charitable_donation_campaign-' . $campaign->ID,
                'no_tax'        => true,
                'type'          => 'item',
                'download_id'   => 0, 
                'campaign_id'   => $campaign->ID
            ), $campaign_id, $amount );

            return EDD()->fees->add_fee( $donation_fee_args );
        }

        /**
         * When a fee is removed from the cart, the Charitable session object 
         * associated with that fee should also be removed.
         *
         * @return  void
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function remove_donation_fee_from_session( $data ) {
            $fee = EDD()->fees->get_fee( $data['fee'] );
            charitable_get_session()->remove_donation( $fee[ 'campaign_id' ] );
        }

        /**
         * Returns whether the given fee is a donation. 
         *
         * @return  boolean
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function fee_is_donation( $fee ) {
            if ( isset( $fee[ 'campaign_id' ] ) ) {
                return true;
            }
            elseif ( isset( $fee[ 'id' ] ) && 'charitable_donation_campaign' == substr( $fee[ 'id' ], 0, 28 ) ) {
                return true;
            }

            return false;
        }

        /**
         * Return the campaign ID associated with the fee. 
         *
         * @return  int
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function get_fee_campaign_id( $fee ) {
            $campaign_id = isset( $fee[ 'campaign_id' ] ) ? $fee[ 'campaign_id' ] : 0;

            if ( ! $campaign_id && isset( $fee[ 'id' ] ) ) {
                list( $prepend, $campaign_id ) = explode( '-', $fee[ 'id' ] );
            }

            return $campaign_id;
        }

        /**
         * Adds fees to subtotal. 
         *
         * @param   float   $amount
         * @param   array   $fees
         * @return  float
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function add_donation_fees_to_subtotal( $amount, $fees ) {
            foreach ( $fees as $fee ) {
                if ( ! Charitable_EDD_Cart::fee_is_donation( $fee ) ) {
                    continue;
                }

                $amount += $fee[ 'amount' ];
            }

            return $amount;
        }

        /**
         * Removes donation fees from amount
         *
         * @param   float   $amount
         * @param   array   $fees
         * @return  float
         * @access  public
         * @static
         * @since   1.0.0
         */
        public static function remove_donation_fees_from_total( $amount, $fees ) {
            foreach ( $fees as $fee ) {
                if ( ! Charitable_EDD_Cart::fee_is_donation( $fee ) ) {
                    continue;
                }

                $amount -= $fee[ 'amount' ];
            }

            return $amount;
        }

        /**
         * Returns the Charitable_EDD_Benefactor object for a particular benefactor record. 
         *
         * @param   object  $benefactor
         * @return  Charitable_EDD_Benefactor
         * @access  public
         * @since   1.0.0
         */
        public function get_benefactor_object( $benefactor ) {
            if ( ! isset( $this->benefactor_objects[ $benefactor->campaign_benefactor_id ] ) ) {

                $this->benefactor_objects[ $benefactor->campaign_benefactor_id ] = new Charitable_EDD_Benefactor( $benefactor );

            }

            return $this->benefactor_objects[ $benefactor->campaign_benefactor_id ];
        }

        /**
         * Return the benefits afforded by a given benefactor and add these to the $benefits array. 
         *
         * @param   array[] $benefits   The carry array. Contains benefits from all benefactors.    
         * @param   array   $benefactor The benefactor record.
         * @return  array[]
         * @access  private
         * @since   1.0.0
         */
        private function get_benefits_for_benefactor( $benefits, $benefactor ) {
            $benefactor = $this->get_benefactor_object( $benefactor );

            $benefits[ $benefactor->campaign_benefactor_id ] = $benefactor->get_benefits_for_downloads( $this->downloads );
            
            return $benefits;
        }

        /**
         * Parse the raw downloads passed into the object, returning as a structured array. 
         *
         * @param   mixed   $downloads
         * @return  array
         * @access  private
         * @since   1.0.0
         */
        private function parse_downloads( $downloads ) {
            if ( ! is_array( $downloads ) ) {
                return array();
            }

            $downloads = array_reduce( $downloads, array( $this, 'filter_download' ), array() );
        
            ksort( $downloads );

            return $downloads;
        }

        /**
         * Filter download to only include the relevant details. 
         *
         * @param   array       $result
         * @param   array       $download
         * @return  array
         * @access  private
         * @since   1.0.0
         */
        private function filter_download( $result, $download ) {     
            
            $key = $download['id'];

            if ( edd_has_variable_prices( $download['id'] ) ) {

                $price_id = edd_get_cart_item_price_id( $download );
                
                if ( ! is_null( $price_id ) ) {
                    $key = $key . '_' . $price_id;
                }
            }

            /* If this download & price ID was already in the result array, simply add the quantities. */
            if ( isset( $result[ $key ] ) ) {

                $result[ $key ]['quantity'] += intval( $download['quantity'] );

            }   
            /* New download & price ID combo, so put together the array. */ 
            else {

                $ret = array(
                    'id'            => intval( $download['id'] ),
                    'quantity'      => isset( $download['quantity'] ) ? intval( $download['quantity'] ) : 0, 
                    'category_ids'  => wp_get_object_terms( $download['id'], 'download_category', array( 'fields' => 'ids' ) ), 
                    'key'           => $key
                );

                if ( isset( $download[ 'item_price' ] ) ) {

                    $ret[ 'item_price' ] = $download[ 'item_price' ];

                }
                elseif ( isset( $price_id ) ) {

                    $prices = edd_get_variable_prices( $download[ 'id' ] );

                    $ret[ 'item_price' ] = $prices[ $price_id ][ 'amount' ];

                }
                else {

                    $ret[ 'item_price' ] = edd_get_download_price( $download[ 'id'] );

                }

                $result[ $key ] = $ret;
            }

            return $result;
        }

        /**
         * Returns an array with all the download IDs in the cart.
         *
         * @return  int[]
         * @access  private
         * @since   1.0.0
         */
        private function get_download_ids() {
            if ( ! isset( $this->download_ids ) ) {
                $this->download_ids = array_reduce( $this->downloads, array( $this, 'filter_download_id' ), array() );            
            }

            return $this->download_ids;
        }

        /**
         * Filter download to return the download ID.
         *
         * @param   array       $download_ids
         * @param   array       $download
         * @return  array
         * @access  private
         * @since   1.0.0
         */
        private function filter_download_id( $download_ids, $download ) {
            if ( ! in_array( $download[ 'id' ], $download_ids ) ) {
                $download_ids[] = $download[ 'id' ];
            }
            
            return $download_ids;
        }

        /**
         * Parse the raw fees passed into the object, returning as a structured array. 
         *
         * @param   mixed   $fees
         * @return  array
         * @access  private
         * @since   1.0.0
         */
        private function parse_fees( $fees ) {        
            if ( ! $fees ) {
                return array();
            }

            return array_reduce( $fees, array( $this, 'filter_fee' ), array() );
        }

        /**
         * Filter fee and add to the result array if it's a donation. 
         *
         * @param   array   $donations
         * @param   array   $fee
         * @return  array   $donations
         * @access  private
         * @since   1.0.0
         */
        private function filter_fee( $donations, $fee ) {
            if ( ! self::fee_is_donation( $fee ) ) {
                return $donations;
            }

            $campaign_id = $this->get_fee_campaign_id( $fee );

            if ( ! isset( $donations[ $campaign_id ] ) ) {
                $donations[ $campaign_id ] = array();
            }

            $donations[ $campaign_id ][] = $fee[ 'amount' ];

            return $donations;
        }

        /**
         * Calculate the total to be donated as "fees". 
         *
         * @return  float
         * @access  private
         * @since   1.0.0
         */
        private function calculate_sum_total_of_amounts( $total, $amounts ) {
            return $total + array_sum( $amounts );
        }

        /**
         * Calculate the total benefit amount for the given benefactor, adding it to the total. 
         *
         * @param   float   $total
         * @param   array   $benefits
         * @return  float 
         * @access  private
         * @since   1.0.0
         */
        private function calculate_total_benefit_amount( $total, $benefits ) {
            return $total + array_sum( wp_list_pluck( $benefits, 'contribution' ) );
        }

        /**
         * Divide the benefit arrays by campaign.
         *
         * @param   array   $totals
         * @param   array   $benefits
         * @return  array
         * @access  private
         * @since   1.0.0
         */
        private function divide_benefits_by_campaign( $totals, $benefits ) {
            $current = current( $benefits );
            $campaign_id = $current[ 'campaign_id' ];

            if ( ! isset( $totals[ $campaign_id ] ) ) {
                
                $totals[ $campaign_id ] = array();

            }

            $totals[ $campaign_id ] = array_merge( wp_list_pluck( $benefits, 'contribution' ), $totals[ $campaign_id ] );

            return $totals;    
        }

        /**
         * Find the campaigns that will benefit through the purchase of the download, 
         * together with the amount the campaign will receive.
         *
         * @return  array[]
         * @access  private
         * @since   1.0.0
         */
        private function get_benefits_by_download( $downloads, $download ) {
            $download_benefits = array();

            foreach ( $this->get_benefactors() as $benefactor ) {

                if ( ! $this->benefactor_applies_to_download( $benefactor, $download[ 'id' ] ) ) {
                    continue;
                }

                if ( ! isset( $download_benefits[ $benefactor->campaign_id ] ) ) {
                    $download_benefits[ $benefactor->campaign_id ] = array();
                }

                $download_benefits[ $benefactor->campaign_id ][] = $this->get_benefactor_object( $benefactor )->calculate_line_item_contribution( $download );
            }

            $downloads[ $download[ 'id' ] ] = $download_benefits;

            return $downloads;
        }

        /**
         * Returns true if the benefactor applies to the given download. 
         *
         * @param   object  $benefactor
         * @param   int     $download_id
         * @return  boolean
         * @access  private
         * @since   1.0.0
         */
        private function benefactor_applies_to_download( $benefactor, $download_id ) {
            if ( ! $benefactor->contribution_amount_is_per_item ) {
                return false;
            }

            if ( $benefactor->edd_is_global_contribution ) {
                return true;
            }

            if ( $benefactor->edd_download_id == $download_id ) {
                return true;
            }

            if ( $benefactor->edd_download_category_id && has_term( $benefactor->edd_download_category_id, 'download_category', $download_id ) ) {
                return true;
            }

            return false;
        }

        /**
         * Returns the key used to cache the benefits for the cart. 
         *
         * @return  string
         * @access  private
         * @since   1.0.0
         */
        private function get_cache_key() {            
            return sprintf( 'charitable_edd_benefactors_for_downloads_%s', implode( '-', $this->get_download_ids() ) );
        }    
    }

endif; // End class_exists check
